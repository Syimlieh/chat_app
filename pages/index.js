import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useState, useContext, useEffect } from "react";
import { useRouter } from "next/router";
import Layout from "@/components/Layout/Layout";
import { checkAuthenticate } from "@/utils/protectedRoutes";
import { getUser } from "@/api/api";
import { useQuery } from "@tanstack/react-query";
import { UserContext } from "@/context/userContext";
import io from "socket.io-client";
import { InboxContext } from "@/context/inbox";
let socket;

export default function Home({ session }, props) {
  const [message, setMessage] = useState("");
  const router = useRouter();
  const { user, setUser } = useContext(UserContext);
  const { setConversations } = useContext(InboxContext);

  const { data, isLoading, error } = useQuery(
    ["user", session.session.user.email],
    async () => {
      return await getUser(session.session.user.email, setUser);
    }
  );
  const socketInitializer = async () => {
    await fetch("/api/socket");
    socket = io.connect("http://localhost:3000");
    
    socket.on("connect", () => {
      socket.emit("fetchConvo");
      socket.on("inboxFetched", (data) => {
        setConversations(data?.data);
      });
    });
    return () => {
      // Clean up the 'messages' event listener when the component unmounts
      socket.off("fetchConvo");
      socket.off("inboxFetched");
    };
  };
  useEffect(() => {
    const cleanup = socketInitializer();
    if (socket) {
      return cleanup;
    }
  }, []);
  if (error) return <div>Error: {error.message}</div>;
  if (isLoading) return <div>Loading...</div>;

  if (session) {
    return (
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
          <meta
            name="google-site-verification"
            content="EFU9D6XpiSejTgyiMfgklatCJHoKwe1sfQKWgrUhfd4"
          />
        </Head>
        <Layout session={session} socket={socket} />
      </div>
    );
  }
}

export async function getServerSideProps(context) {
  return checkAuthenticate(context, (session) => {
    return {
      props: { session }, // will be passed to the page component as props
    };
  });
}
